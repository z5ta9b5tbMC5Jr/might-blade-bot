# Arquivo para implementa√ß√£o do sistema de invent√°rio

def mostrar_inventario(bot, message, jogadores):
    user_id = message.from_user.id
    if user_id not in jogadores:
        bot.reply_to(message, "Voc√™ ainda n√£o iniciou o jogo! Use /start primeiro.")
        return
    
    jogador = jogadores[user_id]
    
    if not jogador.inventario:
        bot.reply_to(message, "Seu invent√°rio est√° vazio! üéí\n\nVoc√™ pode obter itens derrotando inimigos, completando miss√µes ou comprando na loja.")
        return
    
    from telebot import types
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    
    # Adicionar bot√µes para cada item no invent√°rio
    for item in jogador.inventario:
        markup.add(f"Usar {item}")
    
    markup.add("Voltar")
    
    bot.reply_to(message, "*Seu Invent√°rio:*\n\nSelecione um item para usar:", parse_mode="Markdown", reply_markup=markup)

def usar_item(bot, message, jogadores, consumiveis):
    user_id = message.from_user.id
    jogador = jogadores[user_id]
    
    # Extrair nome do item
    nome_item = message.text[4:]  # Remove "Usar " do in√≠cio
    
    # Verificar se o item est√° no invent√°rio
    if nome_item not in jogador.inventario:
        bot.reply_to(message, f"Voc√™ n√£o possui {nome_item} no seu invent√°rio!")
        return
    
    # Verificar se √© um consum√≠vel
    if nome_item in consumiveis:
        item_info = consumiveis[nome_item]
        
        # Aplicar efeito do item
        if item_info["efeito"] == "vida":
            vida_anterior = jogador.vida
            jogador.vida = min(jogador.vida + item_info["valor"], jogador.vida_maxima)
            bot.reply_to(message, f"Voc√™ usou *{nome_item}* e recuperou {jogador.vida - vida_anterior} pontos de vida!\n\nVida atual: {jogador.vida}/{jogador.vida_maxima} ‚ù§Ô∏è", parse_mode="Markdown")
        
        elif item_info["efeito"] == "mana":
            mana_anterior = jogador.mana
            jogador.mana = min(jogador.mana + item_info["valor"], jogador.mana_maxima)
            bot.reply_to(message, f"Voc√™ usou *{nome_item}* e recuperou {jogador.mana - mana_anterior} pontos de mana!\n\nMana atual: {jogador.mana}/{jogador.mana_maxima} üîÆ", parse_mode="Markdown")
        
        elif item_info["efeito"] == "buff":
            # Implementar sistema de buffs tempor√°rios
            if item_info["atributo"] == "forca":
                jogador.forca += item_info["valor"]
                # Aqui seria ideal implementar um sistema de dura√ß√£o para o buff
                bot.reply_to(message, f"Voc√™ usou *{nome_item}* e ganhou +{item_info['valor']} de for√ßa por {item_info['duracao']} turnos!\n\nFor√ßa atual: {jogador.forca} üí™", parse_mode="Markdown")
            
            elif item_info["atributo"] == "destreza":
                jogador.destreza += item_info["valor"]
                bot.reply_to(message, f"Voc√™ usou *{nome_item}* e ganhou +{item_info['valor']} de destreza por {item_info['duracao']} turnos!\n\nDestreza atual: {jogador.destreza} üèÉ", parse_mode="Markdown")
            
            elif item_info["atributo"] == "inteligencia":
                jogador.inteligencia += item_info["valor"]
                bot.reply_to(message, f"Voc√™ usou *{nome_item}* e ganhou +{item_info['valor']} de intelig√™ncia por {item_info['duracao']} turnos!\n\nIntelig√™ncia atual: {jogador.inteligencia} üß†", parse_mode="Markdown")
            
            elif item_info["atributo"] == "todos":
                jogador.forca += item_info["valor"]
                jogador.destreza += item_info["valor"]
                jogador.inteligencia += item_info["valor"]
                bot.reply_to(message, f"Voc√™ usou *{nome_item}* e ganhou +{item_info['valor']} em todos os atributos por {item_info['duracao']} turnos!\n\nFor√ßa: {jogador.forca} üí™\nDestreza: {jogador.destreza} üèÉ\nIntelig√™ncia: {jogador.inteligencia} üß†", parse_mode="Markdown")
        
        # Remover item do invent√°rio ap√≥s uso
        jogador.inventario.remove(nome_item)
    
    # Se for um equipamento, oferecer para equipar
    else:
        from telebot import types
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add("Equipar", "Cancelar")
        
        # Armazenar temporariamente o item selecionado
        jogador.item_selecionado = nome_item
        
        bot.reply_to(message, f"Deseja equipar *{nome_item}*?", parse_mode="Markdown", reply_markup=markup)
    
    # Salvar jogador no banco de dados ap√≥s usar o item
    from bot import db
    db.salvar_jogador(jogador)

def equipar_item(bot, message, jogadores, armas, armaduras, amuletos):
    user_id = message.from_user.id
    jogador = jogadores[user_id]
    
    # Verificar se h√° um item selecionado
    if not hasattr(jogador, "item_selecionado"):
        bot.reply_to(message, "Nenhum item selecionado para equipar.")
        return
    
    nome_item = jogador.item_selecionado
    
    # Determinar o tipo de item
    tipo_item = None
    if nome_item in armas:
        tipo_item = "arma"
    elif nome_item in armaduras:
        tipo_item = "armadura"
    elif nome_item in amuletos:
        tipo_item = "amuleto"
    
    if not tipo_item:
        bot.reply_to(message, f"N√£o foi poss√≠vel identificar o tipo do item {nome_item}.")
        delattr(jogador, "item_selecionado")
        return
    
    # Verificar restri√ß√µes de classe
    if tipo_item in ["arma", "armadura"]:
        item_info = armas[nome_item] if tipo_item == "arma" else armaduras[nome_item]
        if "classe" in item_info and item_info["classe"] != jogador.classe and item_info["classe"] != "Qualquer":
            bot.reply_to(message, f"Voc√™ n√£o pode equipar *{nome_item}* com a classe {jogador.classe}!", parse_mode="Markdown")
            delattr(jogador, "item_selecionado")
            return
    
    # Equipar o item
    if jogador.equipamento[tipo_item]:
        # Guardar item atual no invent√°rio
        jogador.inventario.append(jogador.equipamento[tipo_item])
    
    # Remover o novo item do invent√°rio e equip√°-lo
    jogador.inventario.remove(nome_item)
    jogador.equipamento[tipo_item] = nome_item
    
    bot.reply_to(message, f"Voc√™ equipou *{nome_item}*!", parse_mode="Markdown")
    
    # Remover o item selecionado tempor√°rio
    delattr(jogador, "item_selecionado")
    
    # Salvar jogador no banco de dados ap√≥s equipar o item
    from bot import db
    db.salvar_jogador(jogador)